// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shared/proto/registry/v1/registry.proto

package registryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nikumar1206/loco/shared/proto/registry/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RegistryServiceName is the fully-qualified name of the RegistryService service.
	RegistryServiceName = "shared.proto.registry.v1.RegistryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegistryServiceGitlabTokenProcedure is the fully-qualified name of the RegistryService's
	// GitlabToken RPC.
	RegistryServiceGitlabTokenProcedure = "/shared.proto.registry.v1.RegistryService/GitlabToken"
)

// RegistryServiceClient is a client for the shared.proto.registry.v1.RegistryService service.
type RegistryServiceClient interface {
	GitlabToken(context.Context, *connect.Request[v1.GitlabTokenRequest]) (*connect.Response[v1.GitlabTokenResponse], error)
}

// NewRegistryServiceClient constructs a client for the shared.proto.registry.v1.RegistryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegistryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegistryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	registryServiceMethods := v1.File_shared_proto_registry_v1_registry_proto.Services().ByName("RegistryService").Methods()
	return &registryServiceClient{
		gitlabToken: connect.NewClient[v1.GitlabTokenRequest, v1.GitlabTokenResponse](
			httpClient,
			baseURL+RegistryServiceGitlabTokenProcedure,
			connect.WithSchema(registryServiceMethods.ByName("GitlabToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// registryServiceClient implements RegistryServiceClient.
type registryServiceClient struct {
	gitlabToken *connect.Client[v1.GitlabTokenRequest, v1.GitlabTokenResponse]
}

// GitlabToken calls shared.proto.registry.v1.RegistryService.GitlabToken.
func (c *registryServiceClient) GitlabToken(ctx context.Context, req *connect.Request[v1.GitlabTokenRequest]) (*connect.Response[v1.GitlabTokenResponse], error) {
	return c.gitlabToken.CallUnary(ctx, req)
}

// RegistryServiceHandler is an implementation of the shared.proto.registry.v1.RegistryService
// service.
type RegistryServiceHandler interface {
	GitlabToken(context.Context, *connect.Request[v1.GitlabTokenRequest]) (*connect.Response[v1.GitlabTokenResponse], error)
}

// NewRegistryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegistryServiceHandler(svc RegistryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	registryServiceMethods := v1.File_shared_proto_registry_v1_registry_proto.Services().ByName("RegistryService").Methods()
	registryServiceGitlabTokenHandler := connect.NewUnaryHandler(
		RegistryServiceGitlabTokenProcedure,
		svc.GitlabToken,
		connect.WithSchema(registryServiceMethods.ByName("GitlabToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/shared.proto.registry.v1.RegistryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegistryServiceGitlabTokenProcedure:
			registryServiceGitlabTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegistryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegistryServiceHandler struct{}

func (UnimplementedRegistryServiceHandler) GitlabToken(context.Context, *connect.Request[v1.GitlabTokenRequest]) (*connect.Response[v1.GitlabTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("shared.proto.registry.v1.RegistryService.GitlabToken is not implemented"))
}
