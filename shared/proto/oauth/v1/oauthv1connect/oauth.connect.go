// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shared/proto/oauth/v1/oauth.proto

package oauthv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nikumar1206/loco/shared/proto/oauth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OAuthServiceName is the fully-qualified name of the OAuthService service.
	OAuthServiceName = "shared.proto.oauth.v1.OAuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OAuthServiceGithubOAuthDetailsProcedure is the fully-qualified name of the OAuthService's
	// GithubOAuthDetails RPC.
	OAuthServiceGithubOAuthDetailsProcedure = "/shared.proto.oauth.v1.OAuthService/GithubOAuthDetails"
)

// OAuthServiceClient is a client for the shared.proto.oauth.v1.OAuthService service.
type OAuthServiceClient interface {
	GithubOAuthDetails(context.Context, *connect.Request[v1.GithubOAuthDetailsRequest]) (*connect.Response[v1.GithubOAuthDetailsResponse], error)
}

// NewOAuthServiceClient constructs a client for the shared.proto.oauth.v1.OAuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	oAuthServiceMethods := v1.File_shared_proto_oauth_v1_oauth_proto.Services().ByName("OAuthService").Methods()
	return &oAuthServiceClient{
		githubOAuthDetails: connect.NewClient[v1.GithubOAuthDetailsRequest, v1.GithubOAuthDetailsResponse](
			httpClient,
			baseURL+OAuthServiceGithubOAuthDetailsProcedure,
			connect.WithSchema(oAuthServiceMethods.ByName("GithubOAuthDetails")),
			connect.WithClientOptions(opts...),
		),
	}
}

// oAuthServiceClient implements OAuthServiceClient.
type oAuthServiceClient struct {
	githubOAuthDetails *connect.Client[v1.GithubOAuthDetailsRequest, v1.GithubOAuthDetailsResponse]
}

// GithubOAuthDetails calls shared.proto.oauth.v1.OAuthService.GithubOAuthDetails.
func (c *oAuthServiceClient) GithubOAuthDetails(ctx context.Context, req *connect.Request[v1.GithubOAuthDetailsRequest]) (*connect.Response[v1.GithubOAuthDetailsResponse], error) {
	return c.githubOAuthDetails.CallUnary(ctx, req)
}

// OAuthServiceHandler is an implementation of the shared.proto.oauth.v1.OAuthService service.
type OAuthServiceHandler interface {
	GithubOAuthDetails(context.Context, *connect.Request[v1.GithubOAuthDetailsRequest]) (*connect.Response[v1.GithubOAuthDetailsResponse], error)
}

// NewOAuthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOAuthServiceHandler(svc OAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	oAuthServiceMethods := v1.File_shared_proto_oauth_v1_oauth_proto.Services().ByName("OAuthService").Methods()
	oAuthServiceGithubOAuthDetailsHandler := connect.NewUnaryHandler(
		OAuthServiceGithubOAuthDetailsProcedure,
		svc.GithubOAuthDetails,
		connect.WithSchema(oAuthServiceMethods.ByName("GithubOAuthDetails")),
		connect.WithHandlerOptions(opts...),
	)
	return "/shared.proto.oauth.v1.OAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OAuthServiceGithubOAuthDetailsProcedure:
			oAuthServiceGithubOAuthDetailsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOAuthServiceHandler struct{}

func (UnimplementedOAuthServiceHandler) GithubOAuthDetails(context.Context, *connect.Request[v1.GithubOAuthDetailsRequest]) (*connect.Response[v1.GithubOAuthDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("shared.proto.oauth.v1.OAuthService.GithubOAuthDetails is not implemented"))
}
