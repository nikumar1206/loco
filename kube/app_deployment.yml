apiVersion: apps/v1
kind: Deployment
metadata:
  name:  hello-world
  namespace: loco-setup
  labels:
    app:  hello-world
spec:
  selector:
    matchLabels:
      app: hello-world
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  hello-world
    spec:
      # initContainers:
      #   Init containers are exactly like regular containers, except:
      #     - Init containers always run to completion.
      #     - Each init container must complete successfully before the next one starts.
      containers:
      - name: hello-world
        image: hashicorp/http-echo
        args:
          - "-text=Hello from Loco!"
        ports:
          - containerPort: 5678
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        # livenessProbe:
        #   tcpSocket:
        #     port: 80
        #   initialDelaySeconds: 5
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 3
        #   periodSeconds: 10
        # readinessProbe:
        #   httpGet:
        #     path: /_status/healthz
        #     port: 80
        #   initialDelaySeconds: 5
        #   timeoutSeconds: 2
        #   successThreshold: 1
        #   failureThreshold: 3
        #   periodSeconds: 10
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: hello-world
  namespace: loco-setup
spec:
  selector:
    app: hello-world
  type: ClusterIP
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
  - name: hello-world
    protocol: TCP
    port: 80
    targetPort: 5678
    # If you set the `spec.type` field to `NodePort` and you want a specific port number,
    # you can specify a value in the `spec.ports[*].nodePort` field.
    # nodePort: 