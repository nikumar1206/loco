// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/app/v1/app.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nikumar1206/loco/proto/app/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AppServiceName is the fully-qualified name of the AppService service.
	AppServiceName = "proto.app.v1.AppService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppServiceDeployAppProcedure is the fully-qualified name of the AppService's DeployApp RPC.
	AppServiceDeployAppProcedure = "/proto.app.v1.AppService/DeployApp"
	// AppServiceLogsProcedure is the fully-qualified name of the AppService's Logs RPC.
	AppServiceLogsProcedure = "/proto.app.v1.AppService/Logs"
	// AppServiceStatusProcedure is the fully-qualified name of the AppService's Status RPC.
	AppServiceStatusProcedure = "/proto.app.v1.AppService/Status"
	// AppServiceDestroyAppProcedure is the fully-qualified name of the AppService's DestroyApp RPC.
	AppServiceDestroyAppProcedure = "/proto.app.v1.AppService/DestroyApp"
)

// AppServiceClient is a client for the proto.app.v1.AppService service.
type AppServiceClient interface {
	DeployApp(context.Context, *connect.Request[v1.DeployAppRequest]) (*connect.Response[v1.DeployAppResponse], error)
	Logs(context.Context, *connect.Request[v1.LogsRequest]) (*connect.ServerStreamForClient[v1.LogsResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	DestroyApp(context.Context, *connect.Request[v1.DestroyAppRequest]) (*connect.Response[v1.DestroyAppResponse], error)
}

// NewAppServiceClient constructs a client for the proto.app.v1.AppService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	appServiceMethods := v1.File_proto_app_v1_app_proto.Services().ByName("AppService").Methods()
	return &appServiceClient{
		deployApp: connect.NewClient[v1.DeployAppRequest, v1.DeployAppResponse](
			httpClient,
			baseURL+AppServiceDeployAppProcedure,
			connect.WithSchema(appServiceMethods.ByName("DeployApp")),
			connect.WithClientOptions(opts...),
		),
		logs: connect.NewClient[v1.LogsRequest, v1.LogsResponse](
			httpClient,
			baseURL+AppServiceLogsProcedure,
			connect.WithSchema(appServiceMethods.ByName("Logs")),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[v1.StatusRequest, v1.StatusResponse](
			httpClient,
			baseURL+AppServiceStatusProcedure,
			connect.WithSchema(appServiceMethods.ByName("Status")),
			connect.WithClientOptions(opts...),
		),
		destroyApp: connect.NewClient[v1.DestroyAppRequest, v1.DestroyAppResponse](
			httpClient,
			baseURL+AppServiceDestroyAppProcedure,
			connect.WithSchema(appServiceMethods.ByName("DestroyApp")),
			connect.WithClientOptions(opts...),
		),
	}
}

// appServiceClient implements AppServiceClient.
type appServiceClient struct {
	deployApp  *connect.Client[v1.DeployAppRequest, v1.DeployAppResponse]
	logs       *connect.Client[v1.LogsRequest, v1.LogsResponse]
	status     *connect.Client[v1.StatusRequest, v1.StatusResponse]
	destroyApp *connect.Client[v1.DestroyAppRequest, v1.DestroyAppResponse]
}

// DeployApp calls proto.app.v1.AppService.DeployApp.
func (c *appServiceClient) DeployApp(ctx context.Context, req *connect.Request[v1.DeployAppRequest]) (*connect.Response[v1.DeployAppResponse], error) {
	return c.deployApp.CallUnary(ctx, req)
}

// Logs calls proto.app.v1.AppService.Logs.
func (c *appServiceClient) Logs(ctx context.Context, req *connect.Request[v1.LogsRequest]) (*connect.ServerStreamForClient[v1.LogsResponse], error) {
	return c.logs.CallServerStream(ctx, req)
}

// Status calls proto.app.v1.AppService.Status.
func (c *appServiceClient) Status(ctx context.Context, req *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// DestroyApp calls proto.app.v1.AppService.DestroyApp.
func (c *appServiceClient) DestroyApp(ctx context.Context, req *connect.Request[v1.DestroyAppRequest]) (*connect.Response[v1.DestroyAppResponse], error) {
	return c.destroyApp.CallUnary(ctx, req)
}

// AppServiceHandler is an implementation of the proto.app.v1.AppService service.
type AppServiceHandler interface {
	DeployApp(context.Context, *connect.Request[v1.DeployAppRequest]) (*connect.Response[v1.DeployAppResponse], error)
	Logs(context.Context, *connect.Request[v1.LogsRequest], *connect.ServerStream[v1.LogsResponse]) error
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
	DestroyApp(context.Context, *connect.Request[v1.DestroyAppRequest]) (*connect.Response[v1.DestroyAppResponse], error)
}

// NewAppServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppServiceHandler(svc AppServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appServiceMethods := v1.File_proto_app_v1_app_proto.Services().ByName("AppService").Methods()
	appServiceDeployAppHandler := connect.NewUnaryHandler(
		AppServiceDeployAppProcedure,
		svc.DeployApp,
		connect.WithSchema(appServiceMethods.ByName("DeployApp")),
		connect.WithHandlerOptions(opts...),
	)
	appServiceLogsHandler := connect.NewServerStreamHandler(
		AppServiceLogsProcedure,
		svc.Logs,
		connect.WithSchema(appServiceMethods.ByName("Logs")),
		connect.WithHandlerOptions(opts...),
	)
	appServiceStatusHandler := connect.NewUnaryHandler(
		AppServiceStatusProcedure,
		svc.Status,
		connect.WithSchema(appServiceMethods.ByName("Status")),
		connect.WithHandlerOptions(opts...),
	)
	appServiceDestroyAppHandler := connect.NewUnaryHandler(
		AppServiceDestroyAppProcedure,
		svc.DestroyApp,
		connect.WithSchema(appServiceMethods.ByName("DestroyApp")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.app.v1.AppService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppServiceDeployAppProcedure:
			appServiceDeployAppHandler.ServeHTTP(w, r)
		case AppServiceLogsProcedure:
			appServiceLogsHandler.ServeHTTP(w, r)
		case AppServiceStatusProcedure:
			appServiceStatusHandler.ServeHTTP(w, r)
		case AppServiceDestroyAppProcedure:
			appServiceDestroyAppHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppServiceHandler struct{}

func (UnimplementedAppServiceHandler) DeployApp(context.Context, *connect.Request[v1.DeployAppRequest]) (*connect.Response[v1.DeployAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.app.v1.AppService.DeployApp is not implemented"))
}

func (UnimplementedAppServiceHandler) Logs(context.Context, *connect.Request[v1.LogsRequest], *connect.ServerStream[v1.LogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.app.v1.AppService.Logs is not implemented"))
}

func (UnimplementedAppServiceHandler) Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.app.v1.AppService.Status is not implemented"))
}

func (UnimplementedAppServiceHandler) DestroyApp(context.Context, *connect.Request[v1.DestroyAppRequest]) (*connect.Response[v1.DestroyAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.app.v1.AppService.DestroyApp is not implemented"))
}
