// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: proto/registry/v1/registry.proto

package registryv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitlabTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabTokenRequest) Reset() {
	*x = GitlabTokenRequest{}
	mi := &file_proto_registry_v1_registry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabTokenRequest) ProtoMessage() {}

func (x *GitlabTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_registry_v1_registry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabTokenRequest.ProtoReflect.Descriptor instead.
func (*GitlabTokenRequest) Descriptor() ([]byte, []int) {
	return file_proto_registry_v1_registry_proto_rawDescGZIP(), []int{0}
}

type GitlabTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Registry      string                 `protobuf:"bytes,3,opt,name=registry,proto3" json:"registry,omitempty"`
	Image         string                 `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	ExpiresAt     string                 `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Revoked       bool                   `protobuf:"varint,6,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Expired       bool                   `protobuf:"varint,7,opt,name=expired,proto3" json:"expired,omitempty"`
	Scopes        []string               `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitlabTokenResponse) Reset() {
	*x = GitlabTokenResponse{}
	mi := &file_proto_registry_v1_registry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitlabTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabTokenResponse) ProtoMessage() {}

func (x *GitlabTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_registry_v1_registry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabTokenResponse.ProtoReflect.Descriptor instead.
func (*GitlabTokenResponse) Descriptor() ([]byte, []int) {
	return file_proto_registry_v1_registry_proto_rawDescGZIP(), []int{1}
}

func (x *GitlabTokenResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitlabTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GitlabTokenResponse) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *GitlabTokenResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GitlabTokenResponse) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

func (x *GitlabTokenResponse) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *GitlabTokenResponse) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *GitlabTokenResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

var File_proto_registry_v1_registry_proto protoreflect.FileDescriptor

const file_proto_registry_v1_registry_proto_rawDesc = "" +
	"\n" +
	" proto/registry/v1/registry.proto\x12\x11proto.registry.v1\"\x14\n" +
	"\x12GitlabTokenRequest\"\xe4\x01\n" +
	"\x13GitlabTokenResponse\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x1a\n" +
	"\bregistry\x18\x03 \x01(\tR\bregistry\x12\x14\n" +
	"\x05image\x18\x04 \x01(\tR\x05image\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x05 \x01(\tR\texpiresAt\x12\x18\n" +
	"\arevoked\x18\x06 \x01(\bR\arevoked\x12\x18\n" +
	"\aexpired\x18\a \x01(\bR\aexpired\x12\x16\n" +
	"\x06scopes\x18\b \x03(\tR\x06scopes2q\n" +
	"\x0fRegistryService\x12^\n" +
	"\vGitlabToken\x12%.proto.registry.v1.GitlabTokenRequest\x1a&.proto.registry.v1.GitlabTokenResponse\"\x00B:Z8github.com/nikumar1206/loco/proto/registry/v1;registryv1b\x06proto3"

var (
	file_proto_registry_v1_registry_proto_rawDescOnce sync.Once
	file_proto_registry_v1_registry_proto_rawDescData []byte
)

func file_proto_registry_v1_registry_proto_rawDescGZIP() []byte {
	file_proto_registry_v1_registry_proto_rawDescOnce.Do(func() {
		file_proto_registry_v1_registry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_registry_v1_registry_proto_rawDesc), len(file_proto_registry_v1_registry_proto_rawDesc)))
	})
	return file_proto_registry_v1_registry_proto_rawDescData
}

var file_proto_registry_v1_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_registry_v1_registry_proto_goTypes = []any{
	(*GitlabTokenRequest)(nil),  // 0: proto.registry.v1.GitlabTokenRequest
	(*GitlabTokenResponse)(nil), // 1: proto.registry.v1.GitlabTokenResponse
}
var file_proto_registry_v1_registry_proto_depIdxs = []int32{
	0, // 0: proto.registry.v1.RegistryService.GitlabToken:input_type -> proto.registry.v1.GitlabTokenRequest
	1, // 1: proto.registry.v1.RegistryService.GitlabToken:output_type -> proto.registry.v1.GitlabTokenResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_registry_v1_registry_proto_init() }
func file_proto_registry_v1_registry_proto_init() {
	if File_proto_registry_v1_registry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_registry_v1_registry_proto_rawDesc), len(file_proto_registry_v1_registry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_registry_v1_registry_proto_goTypes,
		DependencyIndexes: file_proto_registry_v1_registry_proto_depIdxs,
		MessageInfos:      file_proto_registry_v1_registry_proto_msgTypes,
	}.Build()
	File_proto_registry_v1_registry_proto = out.File
	file_proto_registry_v1_registry_proto_goTypes = nil
	file_proto_registry_v1_registry_proto_depIdxs = nil
}
